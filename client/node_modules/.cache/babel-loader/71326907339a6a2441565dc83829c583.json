{"ast":null,"code":"var _jsxFileName = \"C:\\\\Glauber\\\\Progama\\xE7\\xE3o\\\\react_js\\\\instagram\\\\client\\\\src\\\\pages\\\\singin\\\\components\\\\EmailForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport axios from 'axios';\nimport DefaultInput from '../../../global_components/DefaultInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EmailForm = ({\n  setFirstFormIsOpen\n}) => {\n  _s();\n\n  const [emailOrNumber, setEmailOrNumber] = useState(\"\");\n  const [fullname, setFullname] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [hasAnErro, setErro] = useState(\"\");\n  const user = {\n    emailOrNumber: emailOrNumber,\n    fullname: fullname,\n    username: username,\n    password: password\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: e => {\n      validateDataSend(e, setFirstFormIsOpen, user, setErro);\n    },\n    children: [/*#__PURE__*/_jsxDEV(DefaultInput, {\n      value: emailOrNumber,\n      onChange: setEmailOrNumber,\n      classOfContainer: \"smaller-margin-bottom\",\n      placeholder: \"Mobile Number or Email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DefaultInput, {\n      value: fullname,\n      onChange: setFullname,\n      classOfContainer: \"smaller-margin-bottom\",\n      placeholder: \"Full name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DefaultInput, {\n      value: username,\n      onChange: setUsername,\n      classOfContainer: \"smaller-margin-bottom\",\n      placeholder: \"Username\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DefaultInput, {\n      value: password,\n      onChange: setPassword,\n      classOfContainer: \"small-margin-bottom\",\n      type: \"password\",\n      placeholder: \"Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), hasAnErro !== \"\" && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"erro-text margin-bottom\",\n      children: hasAnErro\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Sing up\",\n      className: \"main-button\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EmailForm, \"Exekg4T4nJvnMmB1/IlMAhVGhhc=\");\n\n_c = EmailForm;\n\nfunction validateDataSend(e, setFirstFormIsOpen, user, setErro) {\n  e.preventDefault();\n  const erro = \"kaio aksdksak\"; //É enviado um post para o servidor e é esperado que retorne uma string\n\n  /*Essa string deverá conter o erro que o usuario fez no input, por exemplo\r\n  \"o email já existe\" ou \"email inválido\"*/\n\n  /*Caso o usuario tenha digitado tudo corretamente essa string deve ser retornada\r\n  vazia ou seja \"\"*/\n\n  if (erro === \"\") return setFirstFormIsOpen(false);\n  setErro(erro);\n  /*axios.post(\"\", user).then((erro) => {\r\n    if(erro === \"\") return setFirstFormIsOpen(false);\r\n    setErro(erro);\r\n  });*/\n}\n\nexport default EmailForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmailForm\");","map":{"version":3,"sources":["C:/Glauber/Progamação/react_js/instagram/client/src/pages/singin/components/EmailForm.js"],"names":["useState","axios","DefaultInput","EmailForm","setFirstFormIsOpen","emailOrNumber","setEmailOrNumber","fullname","setFullname","username","setUsername","password","setPassword","hasAnErro","setErro","user","e","validateDataSend","preventDefault","erro"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,yCAAzB;;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAA0B;AAAA;;AAE1C,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACa,SAAD,EAAYC,OAAZ,IAAuBd,QAAQ,CAAC,EAAD,CAArC;AACA,QAAMe,IAAI,GAAG;AACXV,IAAAA,aAAa,EAACA,aADH;AAEXE,IAAAA,QAAQ,EAACA,QAFE;AAGXE,IAAAA,QAAQ,EAACA,QAHE;AAIXE,IAAAA,QAAQ,EAACA;AAJE,GAAb;AAOA,sBACE;AAAM,IAAA,QAAQ,EAAGK,CAAD,IAAO;AAACC,MAAAA,gBAAgB,CAACD,CAAD,EAAIZ,kBAAJ,EAAwBW,IAAxB,EAA8BD,OAA9B,CAAhB;AAAuD,KAA/E;AAAA,4BACE,QAAC,YAAD;AACE,MAAA,KAAK,EAAET,aADT;AAEE,MAAA,QAAQ,EAAEC,gBAFZ;AAGE,MAAA,gBAAgB,EAAC,uBAHnB;AAIE,MAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,YADF,eAOE,QAAC,YAAD;AACE,MAAA,KAAK,EAAEC,QADT;AAEE,MAAA,QAAQ,EAAEC,WAFZ;AAGE,MAAA,gBAAgB,EAAC,uBAHnB;AAIE,MAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,YAPF,eAaE,QAAC,YAAD;AACE,MAAA,KAAK,EAAEC,QADT;AAEE,MAAA,QAAQ,EAAEC,WAFZ;AAGE,MAAA,gBAAgB,EAAC,uBAHnB;AAIE,MAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,YAbF,eAmBE,QAAC,YAAD;AACE,MAAA,KAAK,EAAEC,QADT;AAEE,MAAA,QAAQ,EAAEC,WAFZ;AAGE,MAAA,gBAAgB,EAAC,qBAHnB;AAIE,MAAA,IAAI,EAAC,UAJP;AAKE,MAAA,WAAW,EAAC;AALd;AAAA;AAAA;AAAA;AAAA,YAnBF,EA2BGC,SAAS,KAAK,EAAd,iBAAoB;AAAG,MAAA,SAAS,EAAC,yBAAb;AAAA,gBAAwCA;AAAxC;AAAA;AAAA;AAAA;AAAA,YA3BvB,eA6BE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,KAAK,EAAC,SAFR;AAGE,MAAA,SAAS,EAAC;AAHZ;AAAA;AAAA;AAAA;AAAA,YA7BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqCD,CAnDD;;GAAMV,S;;KAAAA,S;;AAsDN,SAASc,gBAAT,CAA0BD,CAA1B,EAA6BZ,kBAA7B,EAAiDW,IAAjD,EAAuDD,OAAvD,EAAgE;AAC9DE,EAAAA,CAAC,CAACE,cAAF;AACA,QAAMC,IAAI,GAAG,eAAb,CAF8D,CAG9D;;AACA;AACF;;AACE;AACF;;AACE,MAAGA,IAAI,KAAK,EAAZ,EAAgB,OAAOf,kBAAkB,CAAC,KAAD,CAAzB;AACdU,EAAAA,OAAO,CAACK,IAAD,CAAP;AACF;AACF;AACA;AACA;AACC;;AAGD,eAAehB,SAAf","sourcesContent":["import {useState} from 'react';\r\nimport axios from 'axios';\r\nimport DefaultInput from '../../../global_components/DefaultInput';\r\n\r\nconst EmailForm = ({setFirstFormIsOpen}) => {\r\n\r\n  const [emailOrNumber, setEmailOrNumber] = useState(\"\");\r\n  const [fullname, setFullname] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [hasAnErro, setErro] = useState(\"\");\r\n  const user = {\r\n    emailOrNumber:emailOrNumber,\r\n    fullname:fullname,\r\n    username:username,\r\n    password:password\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={(e) => {validateDataSend(e, setFirstFormIsOpen, user, setErro)}}>\r\n      <DefaultInput\r\n        value={emailOrNumber}\r\n        onChange={setEmailOrNumber}\r\n        classOfContainer=\"smaller-margin-bottom\"\r\n        placeholder=\"Mobile Number or Email\"\r\n      />\r\n      <DefaultInput\r\n        value={fullname}\r\n        onChange={setFullname}\r\n        classOfContainer=\"smaller-margin-bottom\"\r\n        placeholder=\"Full name\"\r\n      />\r\n      <DefaultInput\r\n        value={username}\r\n        onChange={setUsername}\r\n        classOfContainer=\"smaller-margin-bottom\"\r\n        placeholder=\"Username\"\r\n      />\r\n      <DefaultInput\r\n        value={password}\r\n        onChange={setPassword}\r\n        classOfContainer=\"small-margin-bottom\"\r\n        type=\"password\"\r\n        placeholder=\"Password\"\r\n      />\r\n\r\n      {hasAnErro !== \"\" && <p className=\"erro-text margin-bottom\">{hasAnErro}</p>}\r\n      \r\n      <input\r\n        type=\"submit\"\r\n        value=\"Sing up\"\r\n        className=\"main-button\"\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\n\r\nfunction validateDataSend(e, setFirstFormIsOpen, user, setErro) {\r\n  e.preventDefault();\r\n  const erro = \"kaio aksdksak\";\r\n  //É enviado um post para o servidor e é esperado que retorne uma string\r\n  /*Essa string deverá conter o erro que o usuario fez no input, por exemplo\r\n  \"o email já existe\" ou \"email inválido\"*/\r\n  /*Caso o usuario tenha digitado tudo corretamente essa string deve ser retornada\r\n  vazia ou seja \"\"*/\r\n  if(erro === \"\") return setFirstFormIsOpen(false);\r\n    setErro(erro);\r\n  /*axios.post(\"\", user).then((erro) => {\r\n    if(erro === \"\") return setFirstFormIsOpen(false);\r\n    setErro(erro);\r\n  });*/\r\n}\r\n\r\n\r\nexport default EmailForm;"]},"metadata":{},"sourceType":"module"}