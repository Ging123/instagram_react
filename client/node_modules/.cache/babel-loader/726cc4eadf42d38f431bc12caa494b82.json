{"ast":null,"code":"var _jsxFileName = \"C:\\\\Glauber\\\\Progama\\xE7\\xE3o\\\\react_js\\\\instagram\\\\client\\\\src\\\\pages\\\\singin\\\\components\\\\EmailForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport axios from 'axios';\nimport DefaultInput from '../../../global_components/DefaultInput';\nimport { validateRegexp } from '../../../global_components/textValidator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EmailForm = ({\n  setFirstFormIsOpen\n}) => {\n  _s();\n\n  const [emailOrNumber, setEmailOrNumber] = useState(\"\");\n  const [fullname, setFullname] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [hasAnErro, setErro] = useState(\"\");\n  const user = {\n    emailOrNumber: emailOrNumber,\n    fullname: fullname,\n    username: username,\n    password: password\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: e => {\n      e.preventDefault();\n      validateData(setFirstFormIsOpen, user, setErro);\n    },\n    children: [/*#__PURE__*/_jsxDEV(DefaultInput, {\n      value: emailOrNumber,\n      onChange: setEmailOrNumber,\n      classOfContainer: \"smaller-margin-bottom\",\n      placeholder: \"Mobile Number or Email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DefaultInput, {\n      value: fullname,\n      onChange: setFullname,\n      classOfContainer: \"smaller-margin-bottom\",\n      placeholder: \"Full name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DefaultInput, {\n      value: username,\n      onChange: setUsername,\n      classOfContainer: \"smaller-margin-bottom\",\n      placeholder: \"Username\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DefaultInput, {\n      value: password,\n      onChange: setPassword,\n      classOfContainer: \"small-margin-bottom\",\n      type: \"password\",\n      placeholder: \"Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), hasAnErro !== \"\" && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"erro-text margin-bottom\",\n      children: hasAnErro\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Sing up\",\n      className: \"main-button\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EmailForm, \"Exekg4T4nJvnMmB1/IlMAhVGhhc=\");\n\n_c = EmailForm;\n\nfunction validateData(setFirstFormIsOpen, user, setErro) {\n  const erroInFrontEnd = validateDataInFrontEnd(user);\n  console.log(erroInFrontEnd);\n\n  if (erroInFrontEnd === \"\") {\n    return validateDataInServer(setFirstFormIsOpen, user, setErro);\n  }\n\n  setErro(erroInFrontEnd);\n}\n\nfunction validateDataInFrontEnd(user) {\n  //SINTA-SE LIVRE PRA COPIAR AS VALIDAÇÕES AQUI NO FRONT KAKA\n  const erroInEmailOrNumber = validateEmailOrNumber(user.emailOrNumber);\n  if (erroInEmailOrNumber === \"\") return erroInEmailOrNumber;\n  if (user.fullname.length < 2) return \"the name is to short\";\n  if (user.password.length < 6) return \"password too short\";\n  return \"\";\n}\n\nfunction validateEmailOrNumber(emailOrNumber) {\n  const isAnInvalidNumber = validateRegexp(emailOrNumber, /^\\d{9}$/);\n  const isAnInvalidEmail = validateRegexp(emailOrNumber, /^\\w+@{1}(outlook|hotmail|gmail)\\.com{1}$/);\n  if (isAnInvalidEmail && isAnInvalidNumber) return \"your email or number was typed wrong\";\n  return \"\";\n} //METODO PARA O SERVIDOR\n\n\nfunction validateDataInServer(setFirstFormIsOpen, user, setErro) {\n  //É enviado um post para o servidor e é esperado que retorne uma string\n\n  /*Essa string deverá conter o erro que o usuario fez no input, por exemplo\r\n  \"o email já existe\" ou \"email inválido\"*/\n\n  /*Caso o usuario tenha digitado tudo corretamente essa string deve ser retornada\r\n  vazia ou seja \"\" */\n\n  /*O que será validado...\r\n    Email ou número: deve se anilizar se o email ou número é valido e se ele já \r\n  existe no banco de dados\r\n    Username: Deve se verificar se o username já existe no sistema\r\n    fullname: Deve-se verificar se o fullname tem mais de uma letra\r\n    password: deve-se verificar se o password tem mais de 6 letras \r\n    */\n  //\"user\" é um objeto com os dados digitado nos inputs\n  axios.post(\"\", user).then(erro => {\n    if (erro === \"\") return setFirstFormIsOpen(false);\n    setErro(erro);\n  });\n}\n\nexport default EmailForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmailForm\");","map":{"version":3,"sources":["C:/Glauber/Progamação/react_js/instagram/client/src/pages/singin/components/EmailForm.js"],"names":["useState","axios","DefaultInput","validateRegexp","EmailForm","setFirstFormIsOpen","emailOrNumber","setEmailOrNumber","fullname","setFullname","username","setUsername","password","setPassword","hasAnErro","setErro","user","e","preventDefault","validateData","erroInFrontEnd","validateDataInFrontEnd","console","log","validateDataInServer","erroInEmailOrNumber","validateEmailOrNumber","length","isAnInvalidNumber","isAnInvalidEmail","post","then","erro"],"mappings":"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","sourcesContent":["import {useState} from 'react';\r\nimport axios from 'axios';\r\nimport DefaultInput from '../../../global_components/DefaultInput';\r\nimport {validateRegexp} from '../../../global_components/textValidator';\r\n\r\nconst EmailForm = ({setFirstFormIsOpen}) => {\r\n\r\n  const [emailOrNumber, setEmailOrNumber] = useState(\"\");\r\n  const [fullname, setFullname] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [hasAnErro, setErro] = useState(\"\");\r\n  const user = {\r\n    emailOrNumber:emailOrNumber,\r\n    fullname:fullname,\r\n    username:username,\r\n    password:password\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={(e) => {\r\n      e.preventDefault();\r\n      validateData(setFirstFormIsOpen, user, setErro);\r\n    }}>\r\n      <DefaultInput\r\n        value={emailOrNumber}\r\n        onChange={setEmailOrNumber}\r\n        classOfContainer=\"smaller-margin-bottom\"\r\n        placeholder=\"Mobile Number or Email\"\r\n      />\r\n      <DefaultInput\r\n        value={fullname}\r\n        onChange={setFullname}\r\n        classOfContainer=\"smaller-margin-bottom\"\r\n        placeholder=\"Full name\"\r\n      />\r\n      <DefaultInput\r\n        value={username}\r\n        onChange={setUsername}\r\n        classOfContainer=\"smaller-margin-bottom\"\r\n        placeholder=\"Username\"\r\n      />\r\n      <DefaultInput\r\n        value={password}\r\n        onChange={setPassword}\r\n        classOfContainer=\"small-margin-bottom\"\r\n        type=\"password\"\r\n        placeholder=\"Password\"\r\n      />\r\n\r\n      {hasAnErro !== \"\" && <p className=\"erro-text margin-bottom\">{hasAnErro}</p>}\r\n      \r\n      <input\r\n        type=\"submit\"\r\n        value=\"Sing up\"\r\n        className=\"main-button\"\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\n\r\nfunction validateData(setFirstFormIsOpen, user, setErro) {\r\n  const erroInFrontEnd = validateDataInFrontEnd(user);\r\n  console.log(erroInFrontEnd)\r\n  if(erroInFrontEnd === \"\") {\r\n    return validateDataInServer(setFirstFormIsOpen, user, setErro);\r\n  }\r\n  setErro(erroInFrontEnd);\r\n}\r\n\r\n\r\nfunction validateDataInFrontEnd(user) {\r\n  //SINTA-SE LIVRE PRA COPIAR AS VALIDAÇÕES AQUI NO FRONT KAKA\r\n  const erroInEmailOrNumber = validateEmailOrNumber(user.emailOrNumber);\r\n  if(erroInEmailOrNumber === \"\") return erroInEmailOrNumber;\r\n  if(user.fullname.length < 2) return \"the name is to short\";\r\n  if(user.password.length < 6) return \"password too short\";\r\n  return \"\";\r\n}\r\n\r\n\r\nfunction validateEmailOrNumber(emailOrNumber) {\r\n  const isAnInvalidNumber = validateRegexp(emailOrNumber, /^\\d{9}$/);\r\n  const isAnInvalidEmail = validateRegexp(emailOrNumber, /^\\w+@{1}(outlook|hotmail|gmail)\\.com{1}$/);\r\n  if(isAnInvalidEmail && isAnInvalidNumber) return \"your email or number was typed wrong\";\r\n  return \"\";\r\n}\r\n\r\n\r\n//METODO PARA O SERVIDOR\r\nfunction validateDataInServer(setFirstFormIsOpen, user, setErro) {\r\n  //É enviado um post para o servidor e é esperado que retorne uma string\r\n \r\n  /*Essa string deverá conter o erro que o usuario fez no input, por exemplo\r\n  \"o email já existe\" ou \"email inválido\"*/\r\n  \r\n  /*Caso o usuario tenha digitado tudo corretamente essa string deve ser retornada\r\n  vazia ou seja \"\" */\r\n\r\n  /*O que será validado...\r\n\r\n  Email ou número: deve se anilizar se o email ou número é valido e se ele já \r\n  existe no banco de dados\r\n\r\n  Username: Deve se verificar se o username já existe no sistema\r\n\r\n  fullname: Deve-se verificar se o fullname tem mais de uma letra\r\n\r\n  password: deve-se verificar se o password tem mais de 6 letras \r\n\r\n  */\r\n  \r\n  //\"user\" é um objeto com os dados digitado nos inputs\r\n  axios.post(\"\", user).then((erro) => {\r\n    if(erro === \"\") return setFirstFormIsOpen(false);\r\n    setErro(erro);\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\nexport default EmailForm;"]},"metadata":{},"sourceType":"module"}